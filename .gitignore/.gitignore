from pylab import *
from numpy import *
set_printoptions(threshold=nan)
import scipy as sc

x,y = loadtxt("ellipvalues.txt",usecols=(0,1),unpack=True)
ux,uy = loadtxt("ellipuc.txt",usecols=(0,1),unpack=True)

#plot(x,y,'.',label="Original Data")
#xlabel("Horizontal Measurements (Arb. Units)")
#ylabel("Vertical Measurements (Arb. Units)")
#title('Ellipses measurements')
#errorbar(x,y,xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
#grid()

# Full array of x values
xf = arange(10,37,0.01)

# test func
def t(x,a,b):
    return a*x+b

# Simple cubic
def f(x,a0,a1,a2,a3):
    return a0+a1*x+a2*(x**2)+a3*(x**3)

# Exponential power function
def g(x,A,u,v,s):
    return A*(exp(-1*abs((x-u)/s))**v)
    
# T Distribution
def h(x,A,u,v,s):
    return A*(1+(((x-u)/s)**2))**(-1*(v+1)/2)

#popt,pcov = sc.optimize.curve_fit(t,x,y,(0,1))
popt,pcov=sc.optimize.curve_fit(f,x,y,(0,0,0,0),sigma=uy)
popt1,pcov1=sc.optimize.curve_fit(g,x,y,(1,1,1,791),sigma=uy)
popt2,pcov2=sc.optimize.curve_fit(h,x,y,(82.69,1,1,100),sigma=uy)
print(popt2,sqrt(diag(pcov2))) # Diagonalising the covariance matrix gives the variance of the parameters

#plot(xf,f(xf,popt[0],popt[1],popt[2],popt[3]),label = "Simple cubic fit")
#plot(xf,g(xf,popt1[0],popt1[1],popt1[2],popt1[3]),'--',label = "Exponential Power fit")
#plot(xf,h(xf,popt2[0],popt2[1],popt2[2],popt2[3]),'-.',label = "T Distribution fit")
#legend()

figure()
subplot(2,2,1)
plot(x,y,'.',label="Original Data")
errorbar(x,y,xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Vertical Measurements (Arb. Units)")
title('1: Original measurements w/error bars')
grid()

subplot(2,2,2)
plot(x,y,'.',label="Original Data")
plot(xf,f(xf,popt[0],popt[1],popt[2],popt[3]),'g', label = "Simple cubic fit")
errorbar(x,y,xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Vertical Measurements (Arb. Units)")
title('2: Simple cubic fit vs original')
grid()

subplot(2,2,3)
plot(x,y,'.',label="Original Data")
plot(xf,g(xf,popt1[0],popt1[1],popt1[2],popt1[3]),'--',color='red',label = "Exponential Power fit")
errorbar(x,y,xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Vertical Measurements (Arb. Units)")
title('3: Exponential Power fit vs original')
grid()

subplot(2,2,4)
plot(x,y,'.',label="Original Data")
plot(xf,h(xf,popt2[0],popt2[1],popt2[2],popt2[3]),'-.',color='b',label = "T Distribution fit")
errorbar(x,y,xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Vertical Measurements (Arb. Units)")
title('4: T Distribution fit vs original')
grid()

#Chi for simple cubic
chi1 = sum(((y-f(x,popt[0],popt[1],popt[2],popt[3]))**2)/uy**2)/len(x)
#Chi for exponential power fit
chi2 = sum(((y-g(x,popt1[0],popt1[1],popt1[2],popt1[3]))**2)/uy**2)/len(x)
#Chi for T distribution
chi3 = sum(((y-h(x,popt2[0],popt2[1],popt2[2],popt2[3]))**2)/uy**2)/len(x)

print(chi1,chi2,chi3)

#Residuals
figure()
subplot(3,1,1)
plot(x,y-f(x,popt[0],popt[1],popt[2],popt[3]),'.')
errorbar(x,y-f(x,popt[0],popt[1],popt[2],popt[3]),xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
#xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Residuals")
title('1: Simple cubic fit residuals')
grid()

subplot(3,1,2)
plot(x,y-g(x,popt1[0],popt1[1],popt1[2],popt1[3]),'.')
errorbar(x,y-g(x,popt1[0],popt1[1],popt1[2],popt1[3]),xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
#xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Residuals")
title('2: Exponential Power fit residuals')
grid()

subplot(3,1,3)
plot(x,y-h(x,popt2[0],popt2[1],popt2[2],popt2[3]),'.')
errorbar(x,y-h(x,popt2[0],popt2[1],popt2[2],popt2[3]),xerr=ux,yerr=uy,fmt='.',marker='',label="Error Bars")
xlabel("Horizontal Measurements (Arb. Units)")
ylabel("Residuals")
title('3: T Distribution fit residuals')
grid()
